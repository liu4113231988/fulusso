// <auto-generated />
using System;
using Fulu.Passport.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Fulu.Passport.Web.Migrations
{
    [DbContext(typeof(FuluDbContext))]
    partial class FuluDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FuLu.Passport.Domain.Entities.ClientEntity", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClientId"));

                    b.Property<string>("ClientSecret")
                        .HasColumnType("text")
                        .HasColumnName("client_secret");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("HostUrl")
                        .HasColumnType("text")
                        .HasColumnName("host_url");

                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("RedirectUri")
                        .HasColumnType("text")
                        .HasColumnName("redirect_uri");

                    b.HasKey("ClientId");

                    b.ToTable("client");

                    b.HasData(
                        new
                        {
                            ClientId = 10000001,
                            ClientSecret = "14p9ao1gxu4q3sp8ogk8bq4gkct59t9w",
                            Enabled = true,
                            FullName = "葫芦藤",
                            HostUrl = "http://localhost:8080",
                            Id = "d75de7334961432badbb0859fa5615d7",
                            RedirectUri = "http://localhost:8080"
                        });
                });

            modelBuilder.Entity("FuLu.Passport.Domain.Entities.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birthday");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<bool>("EnabledTwoFactor")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled_two_factor");

                    b.Property<string>("FigureUrl")
                        .HasColumnType("text")
                        .HasColumnName("figure_url");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<string>("LastLoginAddress")
                        .HasColumnType("text")
                        .HasColumnName("last_login_address");

                    b.Property<string>("LastLoginIp")
                        .HasColumnType("text")
                        .HasColumnName("last_login_ip");

                    b.Property<DateTime?>("LastLoginTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_time");

                    b.Property<DateTime?>("LastTryLoginTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_try_login_time");

                    b.Property<bool>("Locked")
                        .HasColumnType("boolean")
                        .HasColumnName("locked");

                    b.Property<int>("LoginCount")
                        .HasColumnType("integer")
                        .HasColumnName("login_count");

                    b.Property<int>("LoginErrorCount")
                        .HasColumnType("integer")
                        .HasColumnName("login_error_count");

                    b.Property<string>("NickName")
                        .HasColumnType("text")
                        .HasColumnName("nickname");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("RegisterAddress")
                        .HasColumnType("text")
                        .HasColumnName("register_address");

                    b.Property<int>("RegisterClientId")
                        .HasColumnType("integer")
                        .HasColumnName("register_client_id");

                    b.Property<string>("RegisterClientName")
                        .HasColumnType("text")
                        .HasColumnName("register_client_name");

                    b.Property<string>("RegisterIp")
                        .HasColumnType("text")
                        .HasColumnName("register_ip");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("register_time");

                    b.Property<string>("Salt")
                        .HasColumnType("text")
                        .HasColumnName("salt");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Fulu.Passport.Domain.Entities.ExternalUserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Nickname")
                        .HasColumnType("text")
                        .HasColumnName("nickname");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.ToTable("external_user");
                });

            modelBuilder.Entity("Fulu.Passport.Domain.Entities.OperatorLogEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("Ip")
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.ToTable("operator_log");
                });

            modelBuilder.Entity("Fulu.Passport.Domain.Entities.SmsRecordEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text")
                        .HasColumnName("ip_address");

                    b.Property<string>("Receiver")
                        .HasColumnType("text")
                        .HasColumnName("receiver");

                    b.Property<string>("Remark")
                        .HasColumnType("text")
                        .HasColumnName("remark");

                    b.Property<bool>("SendResult")
                        .HasColumnType("boolean")
                        .HasColumnName("send_result");

                    b.Property<DateTime>("SendTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("send_time");

                    b.Property<string>("SendType")
                        .HasColumnType("text")
                        .HasColumnName("send_type");

                    b.HasKey("Id");

                    b.ToTable("sms_record");
                });
#pragma warning restore 612, 618
        }
    }
}
